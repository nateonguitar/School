import java.util.ArrayList;
import java.util.Collections;

public class Hand extends GroupOfCards
{
	int NUM;
	int maxNumOfCards;
	int shortest = 0;
	int currentSize = 0;
	
	
	public Hand(int num, int maxNumOfCards)
	{
		super(num);
		this.maxNumOfCards = maxNumOfCards;
	}
	//************************************************

	public void sort()
	{
		//Card dummyCard = new Card(0, 0);
			/*Use a selection sort strategy for the sort method. Start with unsorted = current size
			of the array, and step down to unsorted = 1. In each step, iterate through the unsorted
			part of the array, find the card having the greatest value of the expression,
			(13 * suit + number), and move this card to the high end of the index range. (If you
			display the result, you should see the cards sorted by suit from Ace of spaces down to 2
			of clubs.) */
		

		for (int unsorted = 12; unsorted>1; unsorted--)
		{
			for (int j=0; j<unsorted; j++)
			{
				int check1 = (1000 * (getCards().get(0).getSuit()) + (getCards().get(0).getNum()));
				int check2 = (1000 * (getCards().get(j).getSuit()) + (getCards().get(j).getNum()));
				
				if (check1 <= check2)
				{
					getCards().add(12, getCards().remove(j));
				}
			}
		}
	}
	
	

	//************************************************
  
	public void setShortest()
	{
		
	}
  
	public void getShortest()
	{
		
	}
  
	//************************************************
  
	public Card playACard(Game game, Trick trick)
	{
		return null;
	}
	
	//************************************************
	
	public int findLowest()
	{
		return 0;
	}
	
	//************************************************
	
	private int findCount()
	{
		return 0;
	}
	
	//************************************************
	
	private int find(int num, int suit)
	{
		return 0;
	}
	
	//************************************************
	
	private int findHighest(int suit)
	{
		return 0;
	}	
	
	//************************************************
	
	private int findLowest(Game game)
	{
		return 0;
	}
	
	//************************************************
	
	private int findLastHigh(int suit)
	{
		return 0;
	}
	
	//************************************************
	
	private int findHighestBelow(Card winningCard)
	{
		return 0;
	}
	
	public void addCard(Card card)
	{
		getCards().add(card);
	    currentSize++;
	}

	//************************************************
	
	public Card playACard()
	{
			/*If the current size of the trick is zero (you are the first hand), let a local integer called
		  index equal the highest card in your shortest suit, but if this suit is a void let index equal
		  the lowest card in any suit. If the current size of the trick is one less than the total number
		  of players (you are the last hand), and if the trick does not have the queen of spades or
		  any hearts, let index equal the value returned by the findHighest(int suit)
		  method.
		  Next, deal with cases where you are the last hand and there are no bad cards in the trick.
		  Since many of the helper methods return -1 if they fail, you can tighten the code in the
		  playACard method by using an assignment to index inside an empty else-if
		  statement, like this:
		  else if ((trick.getCurrentSize() == game.PLAYERS - 1)
		  && !trick.getHearts() && !trick.getQueen()
		  && (index = findLastHigh(suit)) >= 0);
		  Then, see what to do if you are a middle hand or the last hand with bad cards already in
		  the trick:
			  else if ((index = findHighestBelow(winningCard)) >= 0);
			  else if ((index = findMiddleHigh(game, suit)) >= 0);
			  Then, see what to do if you are void, and able to discard a bad card or your own:
			  else if ((index = find(12, 3)) >= 0); // queen of Spades
			  else if ((index = find(14, 3)) >= 0); // Ace of Spaces
			  else if ((index = find(13, 3)) >= 0); // King of Spades
			  else if ((index = findHighest(2)) >= 0); // heart
			  else
			  {
			  index = findHighest();
			  }
		  Then, remove the card with the resulting value of index, update the trick, update the
		  game, and return the card selected.  */
		return null;
	}
} // end Hand