package cardgame.cards;


import javafx.animation.ParallelTransition;
import javafx.animation.ScaleTransition;
import javafx.animation.SequentialTransition;
import javafx.animation.TranslateTransition;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.util.Duration;

public class Card {
	private Numbers number;
	private Suits suit;
	ImageView face;
	String frontImageString;
	String backImageString = "back.png";
	String sourcePath = "/resources/";
	Image image;
	boolean facingFront = false;
	
	//-----------------------------------------------------------------------------
	
	public Card(Numbers num, Suits suit){
		this.number = num;
		this.suit = suit;
		this.face = new ImageView();
		
		// build the string to it's image		
		switch(suit){
		case HEARTS:
			this.frontImageString = "H";
			break;
		case DIAMONDS:
			this.frontImageString = "D";
			break;
		case SPADES:
			this.frontImageString = "S";
			break;
		case CLUBS:
			this.frontImageString = "C";
			break;
		default:
			break;
		}
		this.frontImageString += this.getNumber().value() + ".png";
		
		this.face.setImage(new Image(sourcePath + this.backImageString));
		
		this.face.setFitWidth(100);
		this.face.setPreserveRatio(true);
		this.face.setSmooth(false);
		this.face.setCache(true);
		
		this.face.setX(20);
		this.face.setY(20);
		
		this.face.setStyle("-fx-border-radius: 10 10 10 10; -fx-background-radius: 10 10 10 10;");
		
		// add click listener
		this.face.addEventHandler(MouseEvent.MOUSE_CLICKED, new EventHandler<MouseEvent>() {

		     @Override
		     public void handle(MouseEvent event) {
		         flip();
		         event.consume();
		     }
		});
		
		
	}
	
	//-----------------------------------------------------------------------------
	
	public Numbers getNumber(){
		return this.number;
	}
	
	//-----------------------------------------------------------------------------
	
	public Suits getSuit(){
		return this.suit;
	}
	
	public ImageView getFace(){
		return this.face;
	}
	
	public void flip(){
		if(!facingFront){
			facingFront = !facingFront;
			ScaleTransition st1 = new ScaleTransition(Duration.millis(200));
			st1.setToX(0);
			st1.setCycleCount(1);
			st1.setAutoReverse(false);
			
			st1.setOnFinished(setImageToFront());
			
			ScaleTransition st2 = new ScaleTransition(Duration.millis(300));
			st2.setToX(1);
			st2.setCycleCount(1);
			st2.setAutoReverse(false);
			
			SequentialTransition st = new SequentialTransition(this.face, st1, st2);
			
			st.play();
			
		}
		
		
	}
	
	private EventHandler<ActionEvent> setImageToFront() {
        	return event -> {
			this.face.setImage(new Image(this.sourcePath + this.frontImageString));
        	};
    	}
	
	public void moveTo(double d, double e, int time){
		TranslateTransition tt = new TranslateTransition(new Duration(time));
		tt.setFromX(this.face.getTranslateX());
		tt.setFromY(this.face.getTranslateY());
		tt.setToX(d);
		tt.setToY(e);
		tt.setCycleCount(1);
		tt.setAutoReverse(true);
	 
	    ParallelTransition pt = new ParallelTransition(this.face, tt);
	    pt.play();
	}
}