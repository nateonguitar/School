This is the pseudocode for the game of war.  It looks a lot like I programmed
it, but only for the super simple stuff.  I like outlining my stuff this way
so it's easier to implement, usually leaving some of this as comments

//***************************************************************************
//***************************************************************************

interface Game{
	public void initialize();
	public void play();
	public void displayWinner();
}

//***************************************************************************
//***************************************************************************

public class GameOfWar{
	private Deck deck = new Deck();
	private Hand player1 = new Hand();
	private Hand player2 = new Hand();

	private int MAX_NUM_ROUNDS = 500;
	private boolean winnerSet = false;
	private String winner;
	
	main(){
		initialize();
		play();
		displayWinner();
	}

	public void initialize(){
		instantiate any variables that might need it
		shuffle the deck
		deal the cards to each player

		anonymous class:
		class PlayedCards extends GroupOfCards{
			
		}

		PlayedCards playedCards = new PlayedCards();
	}

	public void play(){
		// game logic
		for(int i=0; (i<MAX_NUM_ROUNDS || winnerSet){
			compare card[0] of both players using lambda expression
			winner between them gets both and is put at the end of their hand
			
			
			
			if cards are the same a war happens
			@Each player adds their next three cards to the playedCards pile 
				and then compare card[0] for both players

			@The winner of the fourth card comparison wins all the cards
				 in playedCards and gets both compared cards
				 and is put at the end of their hand
			@If there is a tie, this scenario continues

			if(one of the players runs out of cards){
				winner = "player 1" or "player 2"
				winnerSet = true
			}
		}
	}

	public void displayWinner(){
		if(winnerSet){
			Sysout("Winner: " + winner + " who also gets a gold star!!");
		}
		else{
			Sysout("Max number of rounds reached:  TIE");
		}
	}
}

//***************************************************************************
//***************************************************************************

package brooksNathan;

class GroupOfCards{
	ArrayList<Card> cards = new ArrayList<>();
	
	//---------------------------------------------------------------
	
	public void shuffle(){
		int toPull = 0;

		for(int i=0; i<(cards.size()*4); i++){
			// pick a random card
			toPull = (int) ( Math.random() * (cards.size() - 1) );
			
			// pull the card
			Card temp = cards.get(toPull);
			cards.remove(toPull);

			// put the card at the top of the deck
			cards.add(0, temp);
		}
	}
	
	//---------------------------------------------------------------
	
	public void orderHand(){
		// this happens in one iteration of the for loop:
		
		// Given
			// :2-------5----1-3----8Q--------4-----------9------:


		int numCardsInSuit = 0;
		Card temp;
		Suits currentSuit;
		
		for(int k=0; k<4; k++){
			switch (k){
			case 0:
				currentSuit = Suits.SPADES;
				break;
			case 1:
				currentSuit = Suits.CLUBS;
				break;
			case 2:
				currentSuit = Suits.DIAMONDS;
				break;
			default:
				currentSuit = Suits.HEARTS;
			}
			
			// pulls all the cards of the given suit and puts them at the start
			// it also counts how many of this suit got moved
			// :25138Q49-----------------------------------------:
	

			// sort the ones that got moved
			// :1234589Q-----------------------------------------:


			// this will happen on the next iteration with the next 
			// suit and the next  batch will be sorted
			// :############25138Q49-----------------------------:
		}
	}
	
	//-------------------------------------------------------------------
	
	public String toString(){
		// loop through and build a string to display the face value and the suit
		for(Card e : cards){
			switch(e.getSuit()){
			case HEARTS:
				suit = "Hearts";
				break;
			case DIAMONDS:
				suit = "Diamonds";
				break;
			case CLUBS:
				suit = "Clubs";
				break;
			default:
				suit = "Spades";
			}
			
			switch(e.getNumber().number()){
			case 13:
				output += "King" + " \tof " + suit + "\n";
				break;
			case 12:
				output += "Queen" + " \tof " + suit + "\n";
				break;
			case 11:
				output += "Jack" + " \tof " + suit + "\n";
				break;
			case 1:
				output += "Ace" + " \tof " + suit + "\n";
				break;
			default:
				output += e.getNumber() + " \tof " + suit + "\n";
			}
			
			
		}
		return output;
	}
	
	//-------------------------------------------------------------------
	
	// helper method for the orderHand()
	public void add(Card card){
		cards.add(card);
	}
	
	//-------------------------------------------------------------------
	
	// will help with future games
	// allows you to remove a specific face value / suit combination
	
	// removes the first occurrence of the specified card
	public boolean remove(Suits suit, Numbers number){
		for(Card c : cards){
			if(c.getSuit() == suit && c.getNumber() == number){
				cards.remove(c);
				return true;
			}
		}
		return false;
	}
	
	//-------------------------------------------------------------------
	
	// overloaded method
		// this one pulls the top card
		// and gives it to the other GroupOfCards
	public void dealCard(GroupOfCards group){
		group.add(cards.get(0));
		cards.remove(0);
	}
	
	//-------------------------------------------------------------------
	
	// overloaded method
		// this one pulls the selected card
		// and gives it to the other GroupOfCards
	public void dealCard(GroupOfCards group, int index){
		group.add(cards.get(index));
		cards.remove(index);
	}

	//-------------------------------------------------------------------
	
	// overloaded method
		
	public void dealCard(GroupOfCards group, Suits suit, Numbers number){
		// this one pulls the first occurrence of the given suit/number
		// and gives it to the other GroupOfCards
	}
}


//***************************************************************************
//***************************************************************************

class Deck extends GroupOfCards {
	public Deck(){
		super();
		
		fillDeck();
	}
	
	private void fillDeck(){
		Suits suit;
		
		// loops once for each suit
		// adds each kind of card

		for(int i=0; i<4; i++){
			switch(i){
			case 0:
				suit = Suits.HEARTS;
				break;
			case 1:
				suit = Suits.DIAMONDS;
				break;
			case 2:
				suit = Suits.CLUBS;
				break;
			default:
				suit = Suits.SPADES;
				break;
			}
			
			cards.add(new Card(Numbers.ACE, suit));
			cards.add(new Card(Numbers.TWO, suit));
			cards.add(new Card(Numbers.THREE, suit));
			cards.add(new Card(Numbers.FOUR, suit));
			cards.add(new Card(Numbers.FIVE, suit));
			cards.add(new Card(Numbers.SIX, suit));
			cards.add(new Card(Numbers.SEVEN, suit));
			cards.add(new Card(Numbers.EIGHT, suit));
			cards.add(new Card(Numbers.NINE, suit));
			cards.add(new Card(Numbers.TEN, suit));
			cards.add(new Card(Numbers.JACK, suit));
			cards.add(new Card(Numbers.QUEEN, suit));
			cards.add(new Card(Numbers.KING, suit));
		}
	}
}

//***************************************************************************
//***************************************************************************

class Hand extends GroupOfCards{
	public Hand(){
		super();
	}
}

//***************************************************************************
//***************************************************************************

class Card {
	private Numbers number;
	private Suits suit;
	
	public Card(Numbers num, Suits suit){
		this.number = num;
		this.suit = suit;
	}
	
	public Numbers getNumber(){
		return this.number;
	}
	
	public Suits getSuit(){
		return this.suit;
	}
}

//***************************************************************************
//***************************************************************************

enum Numbers{
	// might not have the weights right, will tweak these if I need to when
	// I use them for the first time.  Need to learn the rules of some games better

	ACE  (1,  11, 12),
	TWO  (2,  2,  2 ),
	THREE(3,  3,  3 ),
	FOUR (4,  4,  4 ),
	FIVE (5,  5,  5 ),
	SIX  (6,  6,  6 ),
	SEVEN(7,  7,  7 ),
	EIGHT(8,  8,  8 ),
	NINE (9,  9,  9 ),
	TEN  (10, 10, 10),
	JACK (11, 10, 11),
	QUEEN(12, 10, 11),
	KING (13, 10, 11);
	
	
	private int number;
	private int alternate;
	private int weight;
	
	private Numbers(int number, int alternate, int weight) {
		this.number = number;
		this.alternate = alternate;
		this.weight = weight;
	}
	
	public int number() 	{ return number; 	}
    	public int alternate() 	{ return alternate; 	}
    	public int weight()	{ return weight; 	}
};

//***************************************************************************
//***************************************************************************

enum Suits {
	HEARTS, DIAMONDS, CLUBS, SPADES
}
